-- Load Rayfield
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Create Window
local Window = Rayfield:CreateWindow({
    Name = "Mod Menu",
    LoadingTitle = "Mod Menu",
    LoadingSubtitle = "By Executioner",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "RayfieldConfigs",
        FileName = "FourTabUI"
    }
})

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local LocalPlayer = Players.LocalPlayer

----------------------------------------------------
-- Track previous toggles & movement values
----------------------------------------------------
local prevToggles = {
    Flight = false,
    NoClip = false,
    Spin = false,
    Godmode = false,
    HitboxESP = false,
    NameESP = false,
    HealthESP = false,
    DistanceESP = false,
    InfiniteJump = false
}

local movementValues = { WalkSpeed = 16, JumpHeight = 7 }

----------------------------------------------------
-- Helper for slider animations
----------------------------------------------------
local function updateSliderFillSmooth(sliderObj, fraction)
    if sliderObj and sliderObj.SliderFill then
        local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        TweenService:Create(sliderObj.SliderFill, tweenInfo, {Size = UDim2.new(fraction,0,1,0)}):Play()
    end
end

----------------------------------------------------
-- TAB 1: Modifiers
----------------------------------------------------
local ModifiersTab = Window:CreateTab("Modifiers", 4483362458)

-- WalkSpeed Slider
ModifiersTab:CreateSlider({
    Name = "WalkSpeed",
    Range = {16, 200},
    Increment = 1,
    CurrentValue = 16,
    Flag = "WalkSpeed",
    Callback = function(Value)
        movementValues.WalkSpeed = Value
        local hum = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if hum then pcall(function() hum.WalkSpeed = Value end) end
        updateSliderFillSmooth(ModifiersTab.Flags["WalkSpeed"].Object, (Value-16)/(200-16))
    end
})

-- JumpHeight Slider
ModifiersTab:CreateSlider({
    Name = "Jump Height",
    Range = {7,200},
    Increment = 1,
    CurrentValue = 7,
    Flag = "JumpHeight",
    Callback = function(Value)
        movementValues.JumpHeight = Value
        local hum = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if hum then pcall(function() hum.UseJumpPower=false hum.JumpHeight=Value end) end
        updateSliderFillSmooth(ModifiersTab.Flags["JumpHeight"].Object, (Value-7)/(200-7))
    end
})

-- Flight
local flying, flySpeed = false, 50
local bodyVel
local function startFlight()
    local root = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not root then return end
    if bodyVel then bodyVel:Destroy() end
    bodyVel = Instance.new("BodyVelocity")
    bodyVel.MaxForce = Vector3.new(1e5,1e5,1e5)
    bodyVel.Velocity = Vector3.zero
    bodyVel.Parent = root
    while flying and task.wait() do
        local moveDir = Vector3.zero
        local cam = workspace.CurrentCamera
        if UIS:IsKeyDown(Enum.KeyCode.W) then moveDir += cam.CFrame.LookVector end
        if UIS:IsKeyDown(Enum.KeyCode.S) then moveDir -= cam.CFrame.LookVector end
        if UIS:IsKeyDown(Enum.KeyCode.A) then moveDir -= cam.CFrame.RightVector end
        if UIS:IsKeyDown(Enum.KeyCode.D) then moveDir += cam.CFrame.RightVector end
        if UIS:IsKeyDown(Enum.KeyCode.Space) then moveDir += Vector3.new(0,1,0) end
        if UIS:IsKeyDown(Enum.KeyCode.LeftShift) then moveDir -= Vector3.new(0,1,0) end
        bodyVel.Velocity = (moveDir.Magnitude > 0 and moveDir.Unit * flySpeed) or Vector3.zero
    end
    if bodyVel then bodyVel:Destroy() bodyVel=nil end
end

ModifiersTab:CreateToggle({
    Name="Flight",
    CurrentValue=false,
    Callback=function(Value)
        flying=Value prevToggles.Flight=Value
        if flying then task.spawn(startFlight) end
    end
})

ModifiersTab:CreateSlider({
    Name="Flight Speed",
    Range={10,300},
    Increment=5,
    CurrentValue=50,
    Callback=function(Value) flySpeed=Value updateSliderFillSmooth(ModifiersTab.Flags["FlightSpeed"].Object,(Value-10)/(300-10)) end
})

-- NoClip
local noclip=false
local noclipConn
local noclipParts={}
local function enableNoClip()
    local char = LocalPlayer.Character
    if not char then return end
    noclipParts={}
    for _,p in pairs(char:GetDescendants()) do
        if p:IsA("BasePart") then
            table.insert(noclipParts,p)
            p.CanCollide=false
        end
    end
    noclipConn = RunService.Stepped:Connect(function()
        for _,p in pairs(noclipParts) do
            if p and p.Parent then p.CanCollide=false end
        end
    end)
end
local function disableNoClip()
    if noclipConn then noclipConn:Disconnect() noclipConn=nil end
    for _,p in pairs(noclipParts) do if p then p.CanCollide=true end end
end
ModifiersTab:CreateToggle({
    Name="NoClip",
    CurrentValue=false,
    Callback=function(Value)
        noclip=Value prevToggles.NoClip=Value
        if noclip then enableNoClip() else disableNoClip() end
    end
})

-- Infinite Jump
local infiniteJumpEnabled=false
local jumpBoost=50
ModifiersTab:CreateToggle({
    Name="Infinite Jump",
    CurrentValue=false,
    Callback=function(Value)
        infiniteJumpEnabled=Value prevToggles.InfiniteJump=Value
    end
})
ModifiersTab:CreateSlider({
    Name="Infinite Jump Power",
    Range={20,200},
    Increment=5,
    CurrentValue=jumpBoost,
    Callback=function(Value)
        jumpBoost=Value updateSliderFillSmooth(ModifiersTab.Flags["InfiniteJumpPower"].Object,(Value-20)/(200-20))
    end
})
UIS.JumpRequest:Connect(function()
    if infiniteJumpEnabled then
        local root = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if root then root.Velocity=Vector3.new(root.Velocity.X,jumpBoost,root.Velocity.Z) end
    end
end)

----------------------------------------------------
-- TAB 2: ESP
----------------------------------------------------
local ESPTab = Window:CreateTab("ESP",4483362458)
local espObjects={}
local hitboxESPEnabled,nameESPEnabled,healthESPEnabled,distanceESPEnabled=false,false,false,false

local function createESP(player)
    if player==LocalPlayer or not player.Character or not player.Character:FindFirstChild("Head") then return end
    local char, head = player.Character, player.Character.Head
    if not espObjects[player.Name] then
        local highlight=Instance.new("Highlight")
        highlight.FillTransparency=1 highlight.OutlineTransparency=hitboxESPEnabled and 0 or 1
        highlight.OutlineColor=Color3.new(1,1,1)
        highlight.Parent=char

        local billboard=Instance.new("BillboardGui")
        billboard.Size=UDim2.new(0,200,0,50)
        billboard.StudsOffset=Vector3.new(0,3,0)
        billboard.AlwaysOnTop=true
        billboard.Adornee=head
        billboard.Parent=head

        local nameLabel=Instance.new("TextLabel")
        nameLabel.Size=UDim2.new(1,0,0.25,0) nameLabel.BackgroundTransparency=1
        nameLabel.TextColor3=Color3.new(1,1,1) nameLabel.TextScaled=true
        nameLabel.Visible=nameESPEnabled nameLabel.Text=player.Name
        nameLabel.Parent=billboard

        local healthLabel=Instance.new("TextLabel")
        healthLabel.Size=UDim2.new(1,0,0.25,0) healthLabel.Position=UDim2.new(0,0,0.25,0)
        healthLabel.BackgroundTransparency=1 healthLabel.TextColor3=Color3.new(1,0,0)
        healthLabel.TextScaled=true healthLabel.Visible=healthESPEnabled
        healthLabel.Text="HP:"..(char:FindFirstChildOfClass("Humanoid") and char:FindFirstChildOfClass("Humanoid").Health or 0)
        healthLabel.Parent=billboard

        local distanceLabel=Instance.new("TextLabel")
        distanceLabel.Size=UDim2.new(1,0,0.25,0) distanceLabel.Position=UDim2.new(0,0,0.5,0)
        distanceLabel.BackgroundTransparency=1 distanceLabel.TextColor3=Color3.new(0,1,0)
        distanceLabel.TextScaled=true distanceLabel.Visible=distanceESPEnabled
        distanceLabel.Text=LocalPlayer.Character and "Dist:"..math.floor((head.Position-LocalPlayer.Character.HumanoidRootPart.Position).Magnitude) or "Dist:N/A"
        distanceLabel.Parent=billboard

        espObjects[player.Name]={Highlight=highlight,Name=nameLabel,Health=healthLabel,Distance=distanceLabel}
    end
end

local function updateESP()
    for _,player in pairs(Players:GetPlayers()) do
        createESP(player)
        if espObjects[player.Name] and player.Character then
            local data = espObjects[player.Name]
            data.Highlight.OutlineTransparency = hitboxESPEnabled and 0 or 1
            data.Name.Visible = nameESPEnabled
            data.Health.Visible = healthESPEnabled
            data.Distance.Visible = distanceESPEnabled
            if healthESPEnabled and player.Character:FindFirstChildOfClass("Humanoid") then
                data.Health.Text = "HP:"..math.floor(player.Character:FindFirstChildOfClass("Humanoid").Health)
            end
            if distanceESPEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local dist=(player.Character.Head.Position-LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                data.Distance.Text="Dist:"..math.floor(dist)
            end
        end
    end
end

-- ESP Toggles
ESPTab:CreateToggle({Name="Outline ESP", CurrentValue=false, Callback=function(Value) hitboxESPEnabled=Value prevToggles.HitboxESP=Value updateESP() end})
ESPTab:CreateToggle({Name="Name ESP", CurrentValue=false, Callback=function(Value) nameESPEnabled=Value prevToggles.NameESP=Value updateESP() end})
ESPTab:CreateToggle({Name="Health ESP", CurrentValue=false, Callback=function(Value) healthESPEnabled=Value prevToggles.HealthESP=Value updateESP() end})
ESPTab:CreateToggle({Name="Distance ESP", CurrentValue=false, Callback=function(Value) distanceESPEnabled=Value prevToggles.DistanceESP=Value updateESP() end})

RunService.RenderStepped:Connect(updateESP)

Players.PlayerAdded:Connect(function(plr) plr.CharacterAdded:Connect(function() task.wait(1) if hitboxESPEnabled or nameESPEnabled or healthESPEnabled or distanceESPEnabled then createESP(plr) end end) end)

----------------------------------------------------
-- TAB 3: Spin & Godmode
----------------------------------------------------
local SpinTab = Window:CreateTab("Spin & Godmode",4483362458)
local spinEnabled=false
local spinSpeed=60
local godmodeEnabled=false

SpinTab:CreateToggle({Name="Spin",CurrentValue=false,Callback=function(Value) spinEnabled=Value prevToggles.Spin=Value end})
SpinTab:CreateSlider({Name="Spin Speed",Range={10,100000},Increment=10,CurrentValue=60,Callback=function(Value) spinSpeed=Value end})
SpinTab:CreateToggle({Name="Godmode",CurrentValue=false,Callback=function(Value) godmodeEnabled=Value prevToggles.Godmode=Value end})

RunService.RenderStepped:Connect(function(dt)
    local char = LocalPlayer.Character
    if char and char:FindFirstChild("HumanoidRootPart") then
        local root = char.HumanoidRootPart
        if spinEnabled then root.CFrame=root.CFrame*CFrame.Angles(0,math.rad(spinSpeed*dt),0) end
        if godmodeEnabled then
            local hum = char:FindFirstChildOfClass("Humanoid")
            if hum and hum.Health<hum.MaxHealth then hum.Health=math.huge end
        end
    end
end)

----------------------------------------------------
-- AUTO RETOGGLE ON DEATH
----------------------------------------------------
LocalPlayer.CharacterAdded:Connect(function(char)
    task.wait(1)
    local hum = char:FindFirstChildOfClass("Humanoid")
    if hum then hum.WalkSpeed=movementValues.WalkSpeed hum.UseJumpPower=false hum.JumpHeight=movementValues.JumpHeight end
    if prevToggles.Flight then flying=true task.spawn(startFlight) end
    if prevToggles.NoClip then enableNoClip() end
    infiniteJumpEnabled=prevToggles.InfiniteJump
    spinEnabled=prevToggles.Spin
    godmodeEnabled=prevToggles.Godmode
    hitboxESPEnabled=prevToggles.HitboxESP
    nameESPEnabled=prevToggles.NameESP
    healthESPEnabled=prevToggles.HealthESP
    distanceESPEnabled=prevToggles.DistanceESP
end)
